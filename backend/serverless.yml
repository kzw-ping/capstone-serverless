service:
  name: serverless-photo-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    PHOTOS_TABLE: Photos-app-${self:provider.stage}
    USER_ID_INDEX: userId
    ATTACH_S3_BUCKET: khine-serverless-photo-app-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  # enable AWS X-Ray Tracing
  tracing:
    lambda: true
    apiGateway: true
    iamRoleStatements:            # Permissions here or under every function to trace
      - Effect: 'Allow'           # xray tracing permissions
        Action:
          - 'xray:PutTraceSegments'             # Trace Segments
          - 'xray:PutTelemetryRecords'          # Telemetry
        Resource:
          - '*'

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Photo API
        description: Serverless Photo Application
    models:
      - name: CreatePhotoRequest
        contentType: application/json
        schema: ${file(models/create-photo-request.json)}
      - name: UpdatePhotoRequest
        contentType: application/json
        schema: ${file(models/update-photo-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # PHOTO: Configure this function
  GetPhotos:
    handler: src/lambda/http/getPhotos.handler
    events:
      - http:
          method: get
          path: photos
          authorizer: Auth
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PHOTOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PHOTOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}


  # Photo: Configure this function
  CreatePhoto:
    handler: src/lambda/http/createPhoto.handler
    events:
      - http:
          method: post
          path: photos
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create photo item
            description: Create photo item
            requestModels:
              'application/json': CreatePhotoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PHOTOS_TABLE}

  # Photo: Configure this function
  UpdatePhoto:
    handler: src/lambda/http/updatePhoto.handler
    events:
      - http:
          method: patch
          path: photos/{photoId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update photo item
            description: Update photo item
            requestModels:
              'application/json': UpdatePhotoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PHOTOS_TABLE}

  # Photo: Configure this function
  DeletePhoto:
    handler: src/lambda/http/deletePhoto.handler
    events:
      - http:
          method: delete
          path: photos/{photoId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PHOTOS_TABLE}


  # Photo: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: photos/{photoId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PHOTOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACH_S3_BUCKET}/*

resources:
  Resources:
    # Photo: Add any necessary AWS resources 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
          
    PhotosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: photoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: photoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PHOTOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: photoId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACH_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACH_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket